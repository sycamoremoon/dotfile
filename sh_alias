########### ALIASING ################

# Basic
alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"
alias sl="ls"
alias v="vim"
alias p="pwd"

# Git
alias gs="git status"

# Other
alias pip="pip3"
alias qbat='command -v upower >/dev/null && upower -i $(upower -e | grep BAT)'
alias cdtmp='pushd $(mktemp -d)'
alias rvmake="make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu-"
alias armake="make ARCH=arm64 CROSS_COMPILE=aarch64-unknown-linux-gnu-"

########### ALIASING END ############

cdts() {
	local target=${1:-riscv}
	cd arch/"$target"/boot/dts
}

forwardnet() {
	local dst=${1:-enp0s20f0u6u1}
	local src=${2:-enp0s13f0u4}
	su -c "iptables -t nat -A POSTROUTING -o $src -j MASQUERADE;
	iptables -A FORWARD -i $dst -o $src -j ACCEPT;
	iptables -A FORWARD -o $dst -i $src -m state --state RELATED,ESTABLISHED -j ACCEPT;"

}

chtags() {
	local target=${1:-linux}
	local tag_file="$HOME/.database/ctags/${target}.tags"

	if [ ! -f "$tag_file" ]; then
		echo "$tag_file is not existed!"
		return 1
	fi

	export MY_CTAGS_FILE="$tag_file"
	echo "MY_CTAGS_FILE=$MY_CTAGS_FILE"
	ls -lh "$tag_file"
}

mycscope() {
	local target="${1:-linux}"
	local out_file="$HOME/.database/cscope/$target/cscope.out"

	if [ ! -f "$out_file" ]; then
		echo "$out_file is not existed!"
		return 1
	fi

	echo "cscope -d -f $out_file"
	sleep 0.4
	cscope -d -f $out_file
}

dotlink() {
#	local file=${1:-zshrc}
	local file="$1"
	local dotfile_dir="$HOME/.dotfile"
	local target_file="$dotfile_dir/$file"
	local linked_file="$PWD/$file"

	if [ ! -e "$linked_file" ]; then
		echo "$linked_file is not existed!"
		return 1
	fi

	if [[ "$file" == .* ]]; then
		target_file="$dotfile_dir/${file:1}"
		local directory=$(dirname "$target_file")
		if [ ! -e "$directory" ]; then
			echo "$directory no such a directory!"
			return 1
		fi
	fi

	mv "$file" "$target_file"
	echo "Moved $file to $target_file"

	ln -sf "$target_file" "$linked_file"
	ls -l $linked_file
}

dotdiff() {
	local file="$1"
	local dotfile_dir="$HOME/.dotfile"
	local target_file="$dotfile_dir/$file"
	local full_pathfile="$PWD/$file"

	if [ ! -e "$full_pathfile" ]; then
		echo "$full_pathfile is not existed!"
		return 1
	fi

	if [[ "$file" == .* ]]; then
		target_file="$dotfile_dir/${file:1}"
	fi

	diff "$full_pathfile" "$target_file"
	if [[ "$?" == 0 ]]; then
		echo "$full_pathfile and $target_file are the same"
	fi
}

closekb() {
	local keyboard_id=$(xinput list | grep -i "AT Translated Set 2 keyboard" | sed 's/.*id=\([0-9]\+\).*/\1/')

	if [ -n "$keyboard_id" ]; then
		echo "Going to disable native keyboard with id: $keyboard_id"

		for i in {3..1}; do
			echo "Disable in $i seconds"
			sleep 1
		done

		xinput set-prop $keyboard_id "Device Enabled" 0

		if [ "$?" == 0 ]; then
			echo "Disable native keyboard successfully"
			# Store the keyboard id to a file
			echo $keyboard_id > /tmp/__tmp_AT_Translated_Set_2_keyboard_id
		else
			echo "Failed to disable native keyboard"
		fi

	fi
}

openkb() {
	local keyboard_id=$(cat /tmp/__tmp_AT_Translated_Set_2_keyboard_id)

	if [ -n "$keyboard_id" ]; then
		echo "Going to enable native keyboard with id: $keyboard_id"

		for i in {3..1}; do
			echo "Enable in $i seconds"
			sleep 1
		done

		xinput set-prop $keyboard_id "Device Enabled" 1

		if [ "$?" == 0 ]; then
			rm -f /tmp/__tmp_AT_Translated_Set_2_keyboard_id
			echo "Enable native keyboard successfully"
		else
			echo "Failed to enable native keyboard"
		fi

	fi
}

my_simple_web() {
	SIMPLE_WEB=${1:-"$HOME/.dotfile/database/simple_server"}
	ROOT_DIR=${2:-"$HOME/Resources"}
	# tmp switch dir
	(
		cd "$SIMPLE_WEB" || { echo "Error: Cannot change directory to $SIMPLE_WEB"; exit 1; }

		CERT_FILE="cert.pem"
		KEY_FILE="key.pem"

		if [[ ! -f "$CERT_FILE" || ! -f "$KEY_FILE" ]]; then
			echo "Generating SSL certificate and key..."
			openssl req -x509 -newkey rsa:4096 -keyout "$KEY_FILE" -out "$CERT_FILE" -days 365 -nodes -subj "/CN=localhost"
		fi

		python3 https_server.py --directory "$ROOT_DIR" --cert "$SIMPLE_WEB/$CERT_FILE" --key "$SIMPLE_WEB/$KEY_FILE"
	)
}

my_simple_web_auth() {
	SIMPLE_WEB=${1:-"$HOME/.dotfile/database/simple_server"}
	# tmp switch dir
	(
		cd "$SIMPLE_WEB" || { echo "Error: Cannot change directory to $SIMPLE_WEB"; exit 1; }

		echo "Running auth_config.py..."
		python3 auth_config.py
	)
}
